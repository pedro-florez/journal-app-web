{"version":3,"sources":["types.js","reducers/authReducer.js","reducers/uiReducer.js","reducers/notesReducer.js","store/store.js","actions/ui.js","firebase/firebaseConfig.js","helpers/loadNotes.js","helpers/fileUpload.js","actions/notes.js","actions/auth.js","components/auth/LoginGoogle.js","hooks/useSimpleForm.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","routers/AuthRouter.js","routers/PublicRoute.js","routers/PrivateRoute.js","components/journal/JournalEntry.js","components/journal/JournalEntries.js","components/journal/ButtonEntryNew.js","components/journal/Sidebar.js","components/notes/NoteAppBar.js","components/notes/BtnDeleteNote.js","components/notes/NoteScreen.js","components/journal/NothingSelected.js","components/journal/JournalScreen.js","components/journal/LoadingScreen.js","routers/AppRouter.js","JournalApp.js","index.js"],"names":["types","login","logout","uiSetError","uiDelError","uiStartLoading","uiFinishLoading","notesAddNew","notesActive","notesLoad","notesUpdate","notesUpload","notesDelete","notesCleaner","authReducer","state","type","payload","uid","name","displayName","initialState","loading","msgError","uiReducer","notes","active","notesReducer","map","note","id","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","auth","ui","store","createStore","applyMiddleware","thunk","setError","err","finishLoading","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","googleAuthProvider","GoogleAuthProvider","loadNotes","a","collection","get","queryNotes","forEach","noteDB","push","data","fileUpload","file","formData","FormData","append","fetch","method","body","res","ok","json","cloudRes","secure_url","console","log","addNewNote","activeNote","getNotes","startUpdateNote","img","dispatch","getState","url","newNote","doc","update","refreshNota","Swal","fire","title","deleteNote","notaId","startFireBaseLogin","email","password","signInWithEmailAndPassword","then","user","catch","e","message","LoginGoogle","useDispatch","className","onClick","signInWithPopup","src","alt","to","useSimpleForm","useState","formState","setFormState","handleInputChange","target","value","reset","newInitialState","LoginScreen","useSelector","onSubmit","preventDefault","onChange","placeholder","autoComplete","disabled","RegisterScreen","nombre","confirm","isFormValid","trim","length","validator","isEmail","createUserWithEmailAndPassword","updateProfile","startRegisterUser","AuthRouter","exact","path","component","PublicRoute","isLogged","Component","rest","props","PrivateRoute","JournalEntry","date","notaDate","moment","style","backgroundSize","backgroundImage","format","JournalEntries","ButtonEntryNew","Date","getTime","add","Sidebar","userName","signOut","NoteAppBar","fecha","files","text","allowOutsideClick","showConfirmButton","willOpen","showLoading","fileUrl","close","startUploadFile","display","document","querySelector","click","BtnDeleteNote","noteId","icon","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","result","isConfirmed","delete","NoteScreen","activeId","useRef","useEffect","current","NothingSelected","JournalScreen","LoadingScreen","AppRouter","stateLoading","setStateLoading","setIsLogged","onAuthStateChanged","JournalApp","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3766621a.chunk.js","sourcesContent":["\n/* Custom Types para los Reducers\n-------------------------------------------- */\nconst types = {\n\n    /* Authentication \n    ----------------------------------- */\n    login:  '[auth] Login',\n    logout: '[auth] Logout',\n\n    /* Messaje de Error \n    ----------------------------------- */\n    uiSetError: '[ui] Set Error',\n    uiDelError: '[ui] Del Error',\n\n    /* Loading \n    ----------------------------------- */\n    uiStartLoading:  '[ui] Start Loading',\n    uiFinishLoading: '[ui] Finish Loading',\n\n    /* Notes \n    ----------------------------------- */\n    notesAddNew:  '[notes] New Note',\n    notesActive:  '[notes] Set Active Note',\n    notesLoad:    '[notes] Load Note',\n    notesUpdate:  '[notes] Update Note',\n    notesUpload:  '[notes] Upload Image Url',\n    notesDelete:  '[notes] Delete Note',\n    notesCleaner: '[notes] Cleaner Logout'\n}\n\nexport default types;\n","\nimport types from \"../types\";\n\nconst authReducer = ( state = {}, { type, payload } ) => {\n\n    switch ( type ) {\n\n        case types.login:\n            return {\n                uid:  payload.uid,\n                name: payload.displayName\n            };\n\n        case types.logout:\n            return {};\n    \n        default:\n            return state;\n    }    \n}\n\nexport default authReducer;\n","\nimport types from '../types';\n\nconst initialState = {\n    loading: false,\n    msgError: null\n}\n\nconst uiReducer = ( state = initialState, { type, payload } ) => {\n\n    switch ( type ) {\n\n        case types.uiSetError:\n            return {\n                ...state,\n                msgError: payload\n            };\n\n        case types.uiDelError:\n            return {\n                ...state,\n                msgError: null\n            };\n\n        case types.uiStartLoading:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case types.uiFinishLoading:\n            return {\n                ...state,\n                loading: false\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport default uiReducer;\n","\nimport types from '../types';\n\nconst initialState = {\n    notes: [],\n    active: null\n}\n\nconst notesReducer = ( state = initialState, { type, payload } ) => {\n\n    switch ( type ) {\n\n        /* Agregar Nota al Store\n        --------------------------------- */\n        case types.notesAddNew:\n            return {\n                ...state,\n                notes: [ payload, ...state.notes ]\n            };\n\n        /* Activar Nota\n        --------------------------------- */\n        case types.notesActive:\n            return {\n                ...state,\n                active: {\n                    ...payload\n                }\n            };        \n            \n        /* Mostar Todas Notas\n        --------------------------------- */\n        case types.notesLoad:\n            return {\n                ...state,\n                notes: [ ...payload ]\n            }; \n\n        /* Actualizar Nota en el Arreglo de Notes\n        ----------------------------------------- */\n        case types.notesUpdate:\n            return {\n                ...state,\n                notes: state.notes.map(\n                    note => ( note.id === payload.id ) ? payload : note\n                )              \n            };\n\n        /* Eliminar Nota de el Arreglo en el Store\n        -------------------------------------------------- */\n        case types.notesDelete:\n            return {\n                ...state,\n                active: null,\n                notes: state.notes.filter( note => note.id !== payload )             \n            };\n\n        /* Vaciar Notas del Store al Cerrar Session\n        -------------------------------------------------- */\n        case types.notesCleaner:\n            return initialState;\n            \n        default:\n            return state;\n    }\n}\n\nexport default notesReducer;","\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport authReducer from '../reducers/authReducer';\nimport uiReducer from '../reducers/uiReducer';\nimport notesReducer from '../reducers/notesReducer';\n/*\n** El Store solo puede resivir un Reducer\n** Para enviar varios Reducer esta la Funcion combineReducers\n*/\n\n// Activar Extension de ( Redux DevTools )\nconst composeEnhancers = (\n    typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n) || compose;\n\n// Agregar Varios ( Reducers )\nconst reducers = combineReducers({\n    auth: authReducer,\n    ui: uiReducer,\n    notes: notesReducer\n});\n\n// Crear el ( Store )\nconst store = createStore(\n    reducers,    \n    composeEnhancers(\n        // Activar Middleware\n        applyMiddleware( thunk )\n    )\n);\n\nexport default store;\n","\nimport types from '../types';\n\n/* Modificar el Error\n-------------------------------------------------- */\nexport const setError = ( err ) => ({\n    type: types.uiSetError,\n    payload: err\n});\n\n/* Eliminar el Error ( Null )\n-------------------------------------------------- */\nexport const delError = () => ({\n    type: types.uiDelError\n});\n\n/* Agregar Loading\n-------------------------------------------------- */\nexport const startLoading = () => ({\n    type: types.uiStartLoading\n});\n\n/* Quitar Loading\n-------------------------------------------------- */\nexport const finishLoading = () => ({\n    type: types.uiFinishLoading\n});\n","\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n// Agrega el SDK de Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAlaOmsA8oKgPt75HHBGrtkFjf6qcBmqmE\",\n    authDomain: \"react-journal-app-6a957.firebaseapp.com\",\n    projectId: \"react-journal-app-6a957\",\n    storageBucket: \"react-journal-app-6a957.appspot.com\",\n    messagingSenderId: \"261833224759\",\n    appId: \"1:261833224759:web:999b5f0ae607708545c5b2\"\n};\n\n// Inicializar Firebase SDK\nfirebase.initializeApp( firebaseConfig );\n\n// Configuracion de la Base de Datos en Firebase\nconst db = firebase.firestore();\n\n// Configuracion de Google para Auth\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n\n// Exportacion\nexport { db, googleAuthProvider, firebase }\n","\nimport { db } from '../firebase/firebaseConfig';\n\n/* Listado de Notes DB\n--------------------------------------------------- */\nexport const loadNotes = async( uid ) => {\n\n    // Query Listar todos las Notes\n    const queryNotes = await db.collection(`${ uid }/journal/notes`).get();\n    //console.log( queryNotes );\n\n    const notes = [];\n\n    queryNotes.forEach( noteDB => {\n\n        // Obtener Arreglo ( docs ) de DB\n        //console.log( noteDB.data() );\n\n        // Agregar el ID al Arreglo ( notes )\n        notes.push({        \n            id: noteDB.id,\n            ...noteDB.data()\n        });\n\n    });\n\n    //console.log( notes );  \n\n    return notes;\n}\n","\n/* Subir Imagen a Cloudinary\n--------------------------------------------------- */\nexport const fileUpload = async( file ) => {\n\n    const cloudUrl = 'https://api.cloudinary.com/v1_1/dzlxawpcw/upload';\n\n    const formData = new FormData();\n\n    // Agregar Parametros\n    formData.append('upload_preset', 'react-journal');\n    formData.append('file', file);\n\n    try {\n\n        // Realizar Peticion        \n        const res = await fetch( cloudUrl, {\n            method: 'POST',\n            body: formData\n        });\n\n        // Validar Peticion\n        if ( res.ok ) {\n\n            const cloudRes = await res.json();\n\n            // Url de la Imagen Subida\n            return cloudRes.secure_url;\n\n        }else {\n\n            throw await res.json();\n        }\n        \n    }catch (err) {\n\n        console.log('🚀 err', err)\n    }\n}","\nimport Swal from 'sweetalert2';\n\nimport types from '../types';\nimport { db } from '../firebase/firebaseConfig';\nimport { loadNotes } from '../helpers/loadNotes';\nimport { fileUpload } from '../helpers/fileUpload';\n\n/* Crear Nota en Firebase\n-------------------------------------------------- */\nexport const startNewNote = () => {\n\n    return async( dispatch, getState ) => {\n\n        // Obtener el uid del User Authentication\n        const { uid } = getState().auth;\n\n        // Crear Schema \n        const newNote = {\n            title: '',\n            body: '',\n            date: new Date().getTime()\n        }\n\n        // Crear Colleccion en DB\n        const doc = await db.collection(`${ uid }/journal/notes`).add( newNote );\n\n        // Agregar Nueva Note al Store\n        dispatch(\n            addNewNote( doc.id, newNote )\n        );\n\n        // Activar Nueva Note\n        dispatch(\n            activeNote( doc.id, newNote )\n        );        \n    }\n}\n\n/* Agregar Nota al Store\n-------------------------------------------------- */\nexport const addNewNote = ( id, note ) => ({\n    type: types.notesAddNew,\n    payload: {\n        id,\n        ...note\n    }    \n});\n\n/* Activar Nota\n-------------------------------------------------- */\nexport const activeNote = ( id, note ) => ({\n    type: types.notesActive,\n    payload: {\n        id,\n        ...note\n    }    \n});\n\n/* Obtener Todas las Notes DB\n-------------------------------------------------- */\nexport const startLoadingNotes = ( uid ) => {\n\n    return async( dispatch ) => {\n\n        // Obtener Listado de Notas\n        const notes = await loadNotes( uid );\n        \n        dispatch(\n            getNotes( notes )\n        );        \n    }   \n};\n\n/* Mostrar Todas las Notes\n-------------------------------------------------- */\nexport const getNotes = ( notes ) => ({\n    type: types.notesLoad,\n    payload: notes\n});\n\n/* Actualizar Note en Firebase\n-------------------------------------------------- */\nexport const startUpdateNote = ( note, img = false ) => {\n\n    return async( dispatch, getState ) => {\n\n        const { uid } = getState().auth;\n\n        // Eliminar la Propiedad Url si esta Vacia\n        if ( !note.url ) {\n            delete note.url\n        }\n\n        // Eliminar el ID del Objeto ( note )\n        const newNote = { ...note };\n        delete newNote.id\n\n        // Actualizar en Firebase\n        await db.doc(`${ uid }/journal/notes/${ note.id }`).update( newNote );\n\n        // Actualizar la Note en el Arreglo de Notes\n        dispatch(\n            refreshNota( note )\n        );\n\n        // Mensajes de Exito\n        Swal.fire(\n            'Buen Trabajo', \n            ( img ? 'La imagen se subio con exito.' : note.title ), \n            'success'\n        );\n    }\n}\n\n/* Realizar Cambio en el Menu Latelar\n-------------------------------------------------- */\nexport const refreshNota = ( note ) => ({\n    type: types.notesUpdate,\n    payload: { ...note }\n});\n\n/* Subir Imagen a Cloudinary\n-------------------------------------------------- */\nexport const startUploadFile = ( file ) => {\n\n    return async( dispatch, getState ) => {\n\n        const { active: activeNote } = getState().notes;\n\n        // Loading de Subiendo Imagen\n        Swal.fire({\n            title: 'Subiendo...',\n            text: 'Espere por favor...',\n            allowOutsideClick: false,\n            showConfirmButton: false,\n            willOpen: () => {\n                Swal.showLoading();\n            }\n        });\n\n        // Realizar Peticion a Cloudinary        \n        const fileUrl = await fileUpload( file );\n\n        // Actualizar Url\n        activeNote.url = fileUrl;\n\n        // Actualizar Nota con Url(Img) en Firebase\n        dispatch(\n            startUpdateNote( activeNote, true )\n        );\n\n        // Cerrar el Swal\n        Swal.close();\n    }\n}\n\n/* Eliminar Nota en Firebase\n-------------------------------------------------- */\nexport const startDeleteNote = ( notaId ) => {\n\n    return async( dispatch, getState ) => {\n\n        // Loading de Subiendo Imagen\n        Swal.fire({\n            title: 'Eliminando...',\n            text: 'Espere por favor...',\n            allowOutsideClick: false,\n            showConfirmButton: false,\n            willOpen: () => {\n                Swal.showLoading();\n            }\n        });\n        \n        const { uid } = getState().auth;               \n\n        // Query Delete\n        await db.doc(`${ uid }/journal/notes/${ notaId }`).delete();\n\n        // Actualizar el Store\n        dispatch(\n            deleteNote( notaId )\n        );\n\n        // Cerrar el Swal\n        Swal.close();\n\n        // Swal de Exito\n        Swal.fire(\n            'Buen Trabajo',\n            'Su nota ha sido eliminada.',\n            'success'\n        );\n    }\n}\n\n/* Eliminar Nota de el Arreglo en el Store\n-------------------------------------------------- */\nexport const deleteNote = ( notaId ) => ({\n    type: types.notesDelete,\n    payload: notaId\n});\n\n/* Vaciar Notas del Store al Cerrar Session\n-------------------------------------------------- */\nexport const cleanerNotes = () => ({\n    type: types.notesCleaner\n});\n","\nimport Swal from 'sweetalert2';\n\nimport types from '../types';\nimport { finishLoading, startLoading } from './ui';\nimport { firebase, googleAuthProvider } from '../firebase/firebaseConfig';\nimport { cleanerNotes } from './notes';\n\n/* Authetication con Firebase ( Action Asincrona )\n-------------------------------------------------- */\nexport const startFireBaseLogin = ( email, password ) => {\n\n    // El dispatch lo envia ( Thunk ) automaticamente\n    return ( dispatch ) => {\n        \n        dispatch( startLoading() );\n\n        firebase.auth().signInWithEmailAndPassword( email, password )\n            .then( ({ user: { uid, displayName } }) => {                \n\n                // Actualizar el Store\n                dispatch(                    \n                    login( uid, displayName )\n                );\n\n                dispatch( finishLoading() );\n            })\n            .catch( e => {\n\n                dispatch( finishLoading() );\n\n                // Mensajes de Error\n                Swal.fire('Error', e.message, 'error');\n\n                //console.log( e );\n            });        \n    }\n}\n\n/* Authetication con Google ( Action Asincrona )\n-------------------------------------------------- */\nexport const startGoogleLogin = () => {\n    \n    return ( dispatch ) => {\n        \n        firebase.auth().signInWithPopup( googleAuthProvider )\n            .then( ({ user: { uid, displayName } }) => {\n\n                // Actualizar el Store\n                dispatch(                    \n                    login( uid, displayName )\n                );\n            })\n            .catch( e => {\n\n                // Mensajes de Error\n                Swal.fire('Error', e.message, 'error');\n            });\n    }\n}\n\n/* Register con Firebase ( Action Asincrona )\n-------------------------------------------------- */\nexport const startRegisterUser = ( nombre, email, password ) => {\n    \n    return ( dispatch ) => {\n\n        /*\n        ** createUserWithEmailAndPassword() solo deja\n        ** Enviar el Email y el Password\n        */\n        firebase.auth().createUserWithEmailAndPassword( email, password )\n            .then( async({ user }) => {\n\n                // Actualizar el Nombre del User en Firebase\n                await user.updateProfile({ displayName: nombre }); \n                \n                // Actualizar el Store                \n                dispatch(                    \n                    login( user.uid, user.displayName )\n                );\n            })\n            .catch( e => {\n                // Mensajes de Error\n                Swal.fire('Error', e.message, 'error');\n            });\n    }\n}\n\n/* Login ( Action Sincrona )\n-------------------------------------------------- */\nexport const login = ( uid, displayName ) => ({\n    type: types.login,\n    payload: {\n        uid,\n        displayName\n    }\n});\n\n/* Logout ( Action Asincrona )\n-------------------------------------------------- */\nexport const startLogout = () => {\n    \n    return async( dispatch ) => {\n        \n        await firebase.auth().signOut();\n\n        // Actualizar el Reducer Auth\n        dispatch( logout() );\n\n        // Actualizar el Reducer Notes\n        dispatch( cleanerNotes() );\n    }\n}\n\n/* Logout ( Action Sincrona )\n-------------------------------------------------- */\nexport const logout = () => ({\n    type: types.logout\n});\n","\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { startGoogleLogin } from '../../actions/auth';\n\nconst LoginGoogle = () => {\n\n    const dispatch = useDispatch();\n\n    /* Login con Google\n    -------------------------------------------------- */\n    const handleGooglelogin = () => {\n\n        dispatch( startGoogleLogin() );\n    }\n\n    return (\n        <div className=\"auth__social-networks\">\n\n            <p>Login with social networks</p>\n\n            <div \n                className=\"google-btn\"\n                onClick={ handleGooglelogin }\n            >\n\n                <div className=\"google-icon-wrapper\">\n\n                    <img \n                        className=\"google-icon\" \n                        src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" \n                        alt=\"google button\" \n                    />\n\n                </div>\n\n                <p className=\"btn-text\">\n                    <b>Sign in with google</b>\n                </p>\n\n            </div>\n\n            <Link \n                to=\"/auth/register\"\n                className=\"link mt-1\">\n                Crear Cuenta\n            </Link>\n\n        </div>\n    );\n}\n\nexport default LoginGoogle;\n","\nimport { useState } from 'react';\n\n/* Custom Hook useSimpleForm ( Estado del los Inputs del formularios )\n------------------------------------------------------------------------ */\nconst useSimpleForm = ( initialState = {} ) => {\n    \n    const [ formState, setFormState ] = useState( initialState );\n    \n    const handleInputChange = ({ target }) => {       \n\n        setFormState({\n            ...formState,\n            [ target.name ]: target.value\n        });\n    }\n    \n    const reset = ( newInitialState = initialState ) => {\n\n        setFormState( newInitialState );\n    }\n\n    return [ formState, handleInputChange, reset ];\n}\n\nexport default useSimpleForm;\n","\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport LoginGoogle from './LoginGoogle';\nimport useSimpleForm from '../../hooks/useSimpleForm';\nimport { startFireBaseLogin } from '../../actions/auth';\n\nconst LoginScreen = () => {\n\n    const dispatch = useDispatch();\n\n    const { loading } = useSelector( state => state.ui ); \n\n    const [ formState, handleInputChange ] = useSimpleForm({    \n        email: 'pedro@test.com',\n        password: '123456789'\n    });\n\n    const { email, password } = formState;  \n    \n    /* Login con Firebase\n    -------------------------------------------------- */\n    const handlelogin = (e) => {\n\n        e.preventDefault();\n\n        dispatch( \n            startFireBaseLogin( email, password )\n        );\n    }    \n\n    return (\n        <div className=\"animate__animated animate__fadeIn animate__faster\">\n            <h1 className=\"auth__title mb-5\">🚀 Login</h1>\n\n            <form onSubmit={ handlelogin }>\n\n                <input \n                    type=\"text\"\n                    className=\"auth__input\"\n                    name=\"email\"\n                    value={ email }\n                    onChange={ handleInputChange }\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                />\n\n                <input \n                    type=\"password\"\n                    className=\"auth__input\"\n                    name=\"password\"\n                    value={ password }\n                    onChange={ handleInputChange }\n                    placeholder=\"Password\"\n                />\n\n                <button \n                    type=\"submit\"\n                    className=\"btn btn-primary btn-block\"\n                    disabled={ loading }>\n                    \n                    { loading ? 'Validando...' : 'Ingresar' }\n                </button>\n\n                <LoginGoogle />\n\n            </form>\n        </div>\n    );\n}\n\nexport default LoginScreen;","\nimport React from 'react';\nimport validator from 'validator';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport useSimpleForm from '../../hooks/useSimpleForm';\nimport { startRegisterUser } from '../../actions/auth';\nimport { setError, delError } from '../../actions/ui';\n\nconst RegisterScreen = () => {\n\n    // Obtener Informacion del Store\n    const { msgError } = useSelector(state => state.ui);\n\n    // Cambiar Informacion del Store\n    const dispatch = useDispatch();\n\n    const [ formState, handleInputChange ] = useSimpleForm({\n        nombre: 'Pedro Jose Florez',\n        email:  'pedro@test.com',\n        password: '123456789',\n        confirm: '123456789'\n    });\n\n    const { nombre, email, password, confirm } = formState;    \n\n    const handleRegister = (e) => {\n\n        e.preventDefault();    \n        \n        if ( isFormValid() ) {\n\n            dispatch(\n                startRegisterUser( nombre, email, password )\n            );              \n        }\n    }\n    \n    const isFormValid = () => {\n\n        if ( nombre.trim().length === 0 ) {\n\n            dispatch(\n                setError('🚀 El nombre es requerido.')\n            );\n\n            return false;\n            \n        }else if( !validator.isEmail(email) ) {\n\n            dispatch(\n                setError('🚀 El email no es válido.')\n            );\n\n            return false;\n\n        }else if( password !== confirm || password.length <= 5 ) {\n\n            dispatch(\n                setError('🚀 El password no es válido.')\n            );\n\n            return false;\n        }\n\n        dispatch( delError() );\n        return true;                \n    }\n\n    return (\n        <div className=\"animate__animated animate__fadeIn animate__faster\">\n            \n            <h1 className=\"auth__title mb-5\">🚀 Registrar</h1>\n\n            <form onSubmit={ handleRegister }>\n\n                {\n                    msgError &&\n                    <div className=\"auth__alert-error\">\n                        { msgError }\n                    </div>\n                }\n\n                <input \n                    type=\"text\"\n                    className=\"auth__input\"\n                    name=\"nombre\"\n                    value={ nombre }\n                    onChange={ handleInputChange }\n                    placeholder=\"Nombre\"\n                    autoComplete=\"off\"\n                />\n\n                <input \n                    type=\"text\"\n                    className=\"auth__input\"\n                    name=\"email\"\n                    value={ email }\n                    onChange={ handleInputChange }\n                    placeholder=\"Email\"\n                    autoComplete=\"off\"\n                />\n\n                <input \n                    type=\"password\"\n                    className=\"auth__input\"\n                    name=\"password\"\n                    value={ password }\n                    onChange={ handleInputChange }\n                    placeholder=\"Password\"\n                />\n\n                <input \n                    type=\"password\"\n                    className=\"auth__input\"\n                    name=\"confirm\"\n                    value={ confirm }\n                    onChange={ handleInputChange }\n                    placeholder=\"Confirm\"\n                />\n\n                <button \n                    type=\"submit\"\n                    className=\"btn btn-primary btn-block mb-5\">\n                    Registrarse\n                </button>                                 \n\n                <Link \n                    to=\"/auth/login\"\n                    className=\"link\">\n                    Ya estas registrado?\n                </Link>\n                \n            </form>\n        </div>\n    );\n}\n\nexport default RegisterScreen;","\nimport React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport LoginScreen from '../components/auth/LoginScreen';\nimport RegisterScreen from '../components/auth/RegisterScreen';\n\nconst AuthRouter = () => {\n\n    return (\n        <div className=\"auth__main\">\n\n            <div className=\"auth__box-container\">\n\n                <Switch>                    \n                    \n                    <Route exact path=\"/auth/login\" component={ LoginScreen } />\n                    <Route exact path=\"/auth/register\" component={ RegisterScreen } />\n\n                    <Redirect to=\"/auth/login\" />\n\n                </Switch>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default AuthRouter;","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router';\n\nconst PublicRoute = ({\n    isLogged, \n    component: Component, \n    ...rest\n}) => {    \n    \n    return (\n        <Route { ...rest }\n            component={ ( props ) =>\n\n                ( isLogged ) ?\n                <Redirect to=\"/\" /> :\n                <Component { ...props } />\n            }\n        />\n    );\n}\n\nPublicRoute.propTypes = {\n    isLogged: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}\n\nexport default PublicRoute;","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router';\n\nconst PrivateRoute = ({\n    isLogged, \n    component: Component,\n    ...rest\n}) => {\n    \n    return (\n        <Route { ...rest }\n            component={ ( props ) =>\n\n                ( isLogged ) ?\n                <Component { ...props } /> : \n                <Redirect to=\"/auth/login\" />\n            }\n        />\n    );\n}\n\nPrivateRoute.propTypes = {\n    isLogged: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}\n\nexport default PrivateRoute;","\nimport React from 'react';\nimport moment from 'moment';\nimport 'moment/locale/es'; // Colocar en Español la Date\nimport { useDispatch, useSelector } from 'react-redux';\nimport { activeNote } from '../../actions/notes';\n\nconst JournalEntry = ({ id, title, body, url, date }) => {\n       \n    const notaDate = moment( date );\n    //console.log( '🚀 Hace tanto tiempo', notaDate.fromNow() );\n\n    const { active } = useSelector( state => state.notes );\n\n    const dispatch = useDispatch();\n\n    const handleActiveNote = () => {    \n\n        dispatch(\n            activeNote(\n                id,\n                { title, body, url, date }\n            )\n        );\n    }\n\n    return (\n        <div             \n            className={ \n                `journal__entry pointer animate__animated animate__backInLeft ${ id === active?.id && 'journal__entry-active' }` \n            }\n            onClick={ handleActiveNote }\n        >            \n            {   \n                url &&\n                <div \n                    className=\"journal__entry-picture\"\n                    style={{\n                        backgroundSize: 'cover',\n                        backgroundImage: `url(${ url })`\n                    }}\n                >\n                </div>\n            }\n\n            <div className=\"journal__entry-body\">\n\n                <p className=\"journal__entry-title\">\n                    { title }\n                </p>\n\n                <p className=\"journal__entry-content\">\n                    { body }\n                </p>\n\n            </div>\n\n            <div className=\"journal__entry-date\">\n                <span> { notaDate.format('dddd') } </span> \n                <h4> { notaDate.format('DD MMM') } </h4>               \n            </div>\n           \n        </div>\n    );\n}\n\nexport default JournalEntry;","\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport JournalEntry from './JournalEntry';\n\nconst JournalEntries = () => {\n\n    const { notes } = useSelector( state => state.notes );\n\n    return (\n        <div className=\"journal__entries\">\n\n            {    \n                notes.map( note =>\n\n                    <JournalEntry\n                        key={ note.id }\n                        { ...note }\n                    />\n                )\n            }\n            \n        </div>\n    );\n}\n\nexport default JournalEntries;\n","\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { startNewNote } from '../../actions/notes';\n\nconst ButtonEntryNew = () => {\n\n    const dispatch = useDispatch();\n\n    /* Logout Firebase\n    -------------------------------------------------- */\n    const handleNewEntry = () => {\n\n        dispatch( startNewNote() );\n    }\n\n    return (\n        <div \n            className=\"journal__new-entry animate__animated animate__pulse\"\n            onClick={ handleNewEntry }\n        >\n\n            <i className=\"far fa-calendar-plus fa-5x\"></i>\n\n            <p className=\"mt-5\">\n                Nueva nota\n            </p>\n            \n        </div>\n    );\n}\n\nexport default ButtonEntryNew;\n","\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport JournalEntries from './JournalEntries';\nimport ButtonEntryNew from './ButtonEntryNew';\nimport { startLogout } from '../../actions/auth';\n\nconst Sidebar = () => {\n\n    const dispatch = useDispatch();\n\n    const { name: userName } = useSelector( state => state.auth );    \n\n    /* Logout Firebase\n    -------------------------------------------------- */\n    const handleLogout = () => {\n\n        dispatch( startLogout() );\n    }\n\n    return (\n\n        <aside className=\"journal__sidebar animate__animated animate__fadeIn animate__faster\">\n\n            <div className=\"journal__sidebar-navbar\">\n\n                <h3 className=\"mt-5\">\n                    <i className=\"far fa-moon\"></i>\n                    <span> { userName } </span>\n                </h3>\n\n                <button className=\"btn\" onClick={ handleLogout }>\n                    Salir\n                </button>\n\n            </div>\n\n            <ButtonEntryNew />\n\n            <JournalEntries />\n                        \n        </aside>\n    );\n}\n\nexport default Sidebar;","\nimport React from 'react';\nimport moment from 'moment';\nimport 'moment/locale/es';\nimport Swal from 'sweetalert2';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { startUpdateNote, startUploadFile } from '../../actions/notes';\n\nconst NoteAppBar = ({ fecha }) => {\n    \n    const notaDate = moment( fecha );\n\n    const dispatch = useDispatch();    \n    \n    const { active:note } = useSelector( state => state.notes );\n\n    /* Actualizar Note\n    ------------------------------------------- */\n    const handleUpdateNote = () => {\n\n        dispatch(\n            startUpdateNote( note )\n        );\n    }\n\n    /* Mostrar Seleccion de Imagen ( Input: File )\n    ------------------------------------------- */\n    const handleSelectImg = () => {\n        \n        // Simular un CLick\n        document.querySelector('#fileSelector').click();\n    }\n\n    /* Subir Imagen a Cloudinary \n    ------------------------------------------- */\n    const handleUploadImg = (e) => {\n        \n        const file = e.target.files[0];\n        \n        if ( file ) {\n\n            dispatch(\n                startUploadFile( file )\n            );\n\n        }else {\n\n            // Mensajes de Error\n            Swal.fire('Error', 'No has seleccionado una imagen', 'error');\n        }\n    }\n\n    return (\n        <div className=\"notes__appbar\">\n\n            <span> { notaDate.format('DD [de] MMMM [de] YYYY') } </span>\n\n            <input \n                id=\"fileSelector\"\n                type=\"file\" \n                name=\"imagen\"\n                onChange={ handleUploadImg }\n                style={{\n                    display: 'none'\n                }}\n            />\n\n            <div>\n\n                <button \n                    className=\"btn\"\n                    onClick={ handleSelectImg }\n                >\n                    Subir imagen\n                </button>\n\n                <button \n                    className=\"btn\"\n                    onClick={ handleUpdateNote }\n                >\n                    Guardar\n                </button>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default NoteAppBar;","\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport { useDispatch } from 'react-redux';\n\nimport { startDeleteNote } from '../../actions/notes';\n\nconst BtnDeleteNote = ({ noteId }) => {\n\n    const dispatch = useDispatch();\n\n    const handleDelete = () => {\n\n        Swal.fire({\n            title: '¿Está seguro(a) de eliminar esta nota?',\n            text: \"¡No podrás revertir esto!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            cancelButtonText: 'Cancelar',\n            confirmButtonText: '¡Sí, bórralo!',            \n        }).then((result) => {\n\n            if (result.isConfirmed) {\n\n                dispatch(\n                    startDeleteNote( noteId )\n                );\n            }\n        }); \n    }\n\n    return (\n        <button \n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={ handleDelete }>\n            Eliminar\n        </button>\n    );\n}\n\nexport default BtnDeleteNote;\n","\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport useSimpleForm from '../../hooks/useSimpleForm';\nimport NoteAppBar from './NoteAppBar';\nimport BtnDeleteNote from './BtnDeleteNote';\nimport { activeNote } from '../../actions/notes';\n\nconst NoteScreen = () => {\n\n    const dispatch = useDispatch();\n\n    // Info Note Activa\n    const { active: note } = useSelector( state => state.notes );\n\n    // Values Formalario\n    const [ formState, handleInputChange, reset ] = useSimpleForm( note );    \n\n    const { title, body } = formState;\n   \n    // Almacenar una Variable mutable ( useRef )\n    const activeId = useRef( note.id );\n\n    /*\n    ** Validar Cuando la Nota Cambie Para \n    ** Resetear el useSimpleForm \n    */\n    useEffect( () => {\n\n        // Si el NewID es Diferente a el OldID\n        if ( note.id !== activeId.current ) {\n            reset( note ); \n\n            /*\n            ** Actualizar la Variable ( activeId )\n            ** Para Evitar un Ciclo infinito \n            */\n            activeId.current = note.id;\n        }\n        \n    }, [ note, reset]);\n    \n    /*\n    ** Actualizar la Note Active Cuando\n    ** Haya un Cambio en el Formulario\n    */\n    useEffect(() => {        \n        \n        dispatch(\n            activeNote(\n                formState.id,\n                { ...formState }\n            )\n        );\n        \n    }, [ formState, dispatch ]);\n\n    return (\n        <div className=\"notes__main-content\">\n            \n            <NoteAppBar fecha={ note.date } />\n\n            <div className=\"notes__content\">\n\n                <input \n                    type=\"text\"\n                    className=\"notes__title-input\"\n                    name=\"title\"\n                    value={ title }\n                    onChange={ handleInputChange }\n                    placeholder=\"Titulo\"\n                    autoComplete=\"off\"\n                />\n\n                <textarea\n                    className=\"notes__textarea\"\n                    name=\"body\"\n                    value={ body }\n                    onChange={ handleInputChange }\n                    placeholder=\"Descripción...\" \n                ></textarea>\n\n                {\n                    note.url &&\n                    <div className=\"notes__image\">\n\n                        <img \n                            src={ note.url }\n                            alt={ title }\n                        />                 \n\n                    </div>\n                }\n\n                <BtnDeleteNote noteId={ note.id } />\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default NoteScreen;","\nimport React from 'react';\n\nconst NothingSelected = () => {\n\n    return (\n        <div className=\"nothing__main-content\">\n            <h2>🚀 Nada seleccionado</h2>\n            <hr/>\n            <i className=\"far fa-star fa-4x mt-5\"></i>\n        </div>\n    );\n}\n\nexport default NothingSelected;","\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Sidebar from './Sidebar';\nimport NoteScreen from '../notes/NoteScreen';\nimport NothingSelected from './NothingSelected';\n\nconst JournalScreen = () => {\n\n    const { active } = useSelector( state => state.notes );\n\n    return (\n        <div className=\"journal__main-content animate__animated animate__fadeIn animate__faster\">\n            \n            <Sidebar />\n\n            <main>\n\n                {\n                    ( active ) ? <NoteScreen /> : <NothingSelected />\n                }                 \n\n            </main>\n\n        </div>\n    );\n}\n\nexport default JournalScreen;","\nimport React from 'react';\n\nconst LoadingScreen = () => {\n\n    return (\n        <div className=\"loader\">Cargando...</div>\n    );\n}\n\nexport default LoadingScreen;\n","\nimport React, { useEffect, useState } from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Switch\n} from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport AuthRouter from './AuthRouter';\nimport PublicRoute from './PublicRoute';\nimport PrivateRoute from './PrivateRoute';\nimport JournalScreen from '../components/journal/JournalScreen';\nimport LoadingScreen from '../components/journal/LoadingScreen';\nimport { firebase } from '../firebase/firebaseConfig';\nimport { login } from '../actions/auth';\nimport { startLoadingNotes } from '../actions/notes';\n\nconst AppRouter = () => {\n            \n    const dispatch = useDispatch();\n\n    const [ stateLoading, setStateLoading ] = useState( true );\n\n    const [ isLogged, setIsLogged ] = useState( false );\n\n    useEffect(() => {\n\n        // Verificar si Esta Authentication en Firebase        \n        firebase.auth().onAuthStateChanged( (user) => {\n\n            if ( user?.uid ) {\n\n                // Actualizar Reducer ( Store )\n                dispatch(\n                    login( user.uid, user.displayName )\n                );                \n\n                // Agregar Notes al Reducer ( Store )\n                dispatch( \n                    startLoadingNotes( user.uid )\n                );\n\n                setIsLogged( true );\n\n            }else {\n                setIsLogged( false );\n            }\n\n            setStateLoading( false );\n        });\n        \n    }, [ dispatch ]);\n\n    // Loading de Esperar que el usuario se Logged\n    if ( stateLoading ) {\n        return ( <LoadingScreen /> );\n    }\n    \n    return (\n        <Router>\n            <>\n                <Switch>\n\n                    <PublicRoute \n                        path=\"/auth\" \n                        component={ AuthRouter } \n                        isLogged={ isLogged } \n                    />\n\n                    <PrivateRoute \n                        exact \n                        path=\"/\" \n                        component={ JournalScreen } \n                        isLogged={ isLogged }\n                    />\n\n                    <Redirect to=\"/auth/login\" />\n\n                </Switch>\n            </>\n        </Router>\n    )\n}\n\nexport default AppRouter;\n","\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store/store';\nimport AppRouter from './routers/AppRouter';\n\nconst JournalApp = () => {\n\n    return ( \n        <Provider store={ store }>\n            <AppRouter />\n        </Provider>\n    );\n}\n\nexport default JournalApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport JournalApp from './JournalApp';\n\nimport './styles/styles.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <JournalApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}